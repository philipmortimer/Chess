/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package philipm.cs5.software.development.user.system;

import javax.swing.JTable;
import philipm.cs5.software.development.server.system.Fixture;

/**
 * Creates a form that allow users to view the fixtures and results of the west cross chess club
 * @author mortimer
 */
public class FixturesAndResults extends javax.swing.JFrame {
    private SessionInfo session;//stores the session information
    private static final String[]COLUMN_NAMES=new String[]{"White","Black","Result"};//stores the column names of the table
    private String[][][]fixturesAndResults;//stores the fixtures and results
    private int roundIndex;//stores the round that the user is currently viewing
    private boolean haveFixturesBeenGenerated;//stores whether the fixtures have actually been generated
    /**
     * Creates new form FixturesAndResults
     */
    private FixturesAndResults() {
        initComponents();
    }
    /**
     * Creates new form FixturesAndResults
     * @param session The session information for the current user
     * @throws Exception An exception may occur when retrieving the fixtures and results from the server
     */
    public FixturesAndResults(SessionInfo session) throws Exception{
        initComponents();
        this.session=session;
        //sets various aspects of the table to make a more intuitve user experience
        fixturesAndResultsTbl.getTableHeader().setReorderingAllowed(false);
        fixturesAndResultsTbl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fixturesAndResultsTbl.setDefaultEditor(Object.class, null);
        updateVariablesServer();//retrieves the fixtures and results from the server
        updateTable();//updates the table based on the data retrieved from the server
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        fixturesAndResultsTbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        roundLbl = new javax.swing.JLabel();
        prevRoundBtn = new javax.swing.JButton();
        nextRoundBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Fixtures and Results");

        fixturesAndResultsTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "White", "Black", "Result"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(fixturesAndResultsTbl);
        if (fixturesAndResultsTbl.getColumnModel().getColumnCount() > 0) {
            fixturesAndResultsTbl.getColumnModel().getColumn(0).setResizable(false);
            fixturesAndResultsTbl.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setText("Fixtures and Results");

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        roundLbl.setText("Round 1");

        prevRoundBtn.setText("Previous Round");
        prevRoundBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevRoundBtnActionPerformed(evt);
            }
        });

        nextRoundBtn.setText("Next Round");
        nextRoundBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextRoundBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(438, 438, 438)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 997, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(backBtn)
                        .addGap(235, 235, 235)
                        .addComponent(prevRoundBtn)
                        .addGap(69, 69, 69)
                        .addComponent(nextRoundBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(461, 461, 461)
                        .addComponent(roundLbl)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(3, 3, 3)
                .addComponent(roundLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(prevRoundBtn)
                    .addComponent(nextRoundBtn)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        //takes user back to the form that they came from
        if(session.getIsClubLeader()){//return leader back to leader form
            WestCrossChessClubLeader leader = new WestCrossChessClubLeader(session);
            leader.setVisible(true);
            this.dispose();return;
        }else{//returns member back to member form
            WestCrossChessClubMember member = new WestCrossChessClubMember(session);
            member.setVisible(true);
            this.dispose();return;            
        }
    }//GEN-LAST:event_backBtnActionPerformed

    private void nextRoundBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextRoundBtnActionPerformed
        //displays the next round to the user
        roundIndex++;
        updateTable();
    }//GEN-LAST:event_nextRoundBtnActionPerformed

    private void prevRoundBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevRoundBtnActionPerformed
        //displays the previous round to the user
        roundIndex--;
        updateTable();
    }//GEN-LAST:event_prevRoundBtnActionPerformed
    /**
     * Requests data from the server and updates variables accordingly
     * @throws Exception An exception may occur when attempting to retrieve information from the server
     */
    private void updateVariablesServer() throws Exception{
        fixturesAndResults= ThreadClient.getFixturesAndResults();
        haveFixturesBeenGenerated=fixturesAndResults.length!=0;
        roundIndex=0;
    }
    /**
     * Updates the table based on the data stored in the object
     */
    private void updateTable(){
        if(haveFixturesBeenGenerated){//displays the fixtures and results
            roundLbl.setText("Round "+String.valueOf(roundIndex+1));//dispalys which round is being viewed
            //enables/disables the buttons which take the user to the next and previous round depending on which roudn is being accessed
            prevRoundBtn.setVisible(true);
            prevRoundBtn.setEnabled(roundIndex!=0);
            nextRoundBtn.setEnabled(roundIndex!=(fixturesAndResults.length-1));
            nextRoundBtn.setVisible(true);
            //sets the fixtures and results table to be visible
            jScrollPane1.setEnabled(true);jScrollPane1.setVisible(true);
            fixturesAndResultsTbl.setEnabled(true);fixturesAndResultsTbl.setVisible(true);
            //sets table
            String[][]tableData=new String[fixturesAndResults[0][0].length][COLUMN_NAMES.length];
            //in the form: white, black, result
            for(int player=0;player<tableData.length;player++){
                tableData[player][0]=fixturesAndResults[roundIndex][0][player];
                if(tableData[player][0].equals(Fixture.BY_NAME)){//replaces a bye player with an empty value
                    tableData[player][0]="";
                }
                tableData[player][1]=fixturesAndResults[roundIndex][1][player];
                if(tableData[player][1].equals(Fixture.BY_NAME)){
                    tableData[player][1]="";
                }
                //converts the game state to a value that makes sense to the member's viewing the table
                switch (fixturesAndResults[roundIndex][2][player]) {
                    case Fixture.BYE_GAME_STATE:
                        tableData[player][2]="Bye Game";
                        break;
                    case Fixture.GAME_DRAW:
                        tableData[player][2]="Draw";
                        break;
                    case Fixture.GAME_WHITE_WIN:
                        tableData[player][2]="White Win";
                        break;
                    case Fixture.GAME_BLACK_WIN:
                        tableData[player][2]="Black Win";
                        break;
                    default:
                        //game has not yet been played
                        tableData[player][2]="Game Not Yet Played";
                        break;
                }
            }
            //sets the table to the data generated
            JTable tab = new JTable(tableData, COLUMN_NAMES);
            fixturesAndResultsTbl.setModel(tab.getModel());
            return;
        }else{
            //displays that the fixtures have not been generated and updates the form's components accordingly
            roundLbl.setText("The fixtures have not yet been generated");
            prevRoundBtn.setEnabled(false);prevRoundBtn.setVisible(false);
            nextRoundBtn.setEnabled(false);nextRoundBtn.setVisible(false);
            fixturesAndResultsTbl.setEnabled(false);fixturesAndResultsTbl.setVisible(false);
            jScrollPane1.setEnabled(false);jScrollPane1.setVisible(false);
            return;
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FixturesAndResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FixturesAndResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FixturesAndResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FixturesAndResults.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FixturesAndResults().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTable fixturesAndResultsTbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nextRoundBtn;
    private javax.swing.JButton prevRoundBtn;
    private javax.swing.JLabel roundLbl;
    // End of variables declaration//GEN-END:variables
}
