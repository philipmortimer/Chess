/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package philipm.cs5.software.development.server.system;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 * Creates a form that is used to run the server
 * @author mortimer
 */
public class ServerUI extends javax.swing.JFrame{
    /**
     * Creates new form ServerUI
     */
    private Server serv;//stores the server object
    private Thread serverThread=null;//stores the thread used to execute the server on
    private String[]errorMessagesArray;
    private boolean isServerRunning=false;
    Timer timer;//stores a timer object that periodically checks to see if any errors have occured for the server
    public ServerUI() {
        initComponents();
        updateCompontentsBasedOnServerStatus();
    }
    /**
     * Alters the look of several components depending on whether the server is currently online
     */
    private void updateCompontentsBasedOnServerStatus(){
        if(isServerRunning){
            serverStatusColourLbl.setBackground(Color.green);
            serverStatusLbl.setText("Server IS Running");
            changeServerStateBtn.setText("Turn Server Off");
            appointLeaderBtn.setEnabled(true);appointLeaderBtn.setVisible(true);
        }else{
            serverStatusColourLbl.setBackground(Color.red);
            serverStatusLbl.setText("Server IS NOT Running");
            changeServerStateBtn.setText("Turn Server On");
            appointLeaderBtn.setEnabled(false);appointLeaderBtn.setVisible(false);
        }
    }
    /**
     * Adds the text message to the chat along with the date and time when the message was added.
     * @param message The message to be added
     */
    private void addMessageToTextArea(String message){
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");  
        LocalDateTime now = LocalDateTime.now();
        String currentText=serverInfoTxt.getText();
        //adds the message and time of the message
        if(currentText.equals("")){
            serverInfoTxt.setText(dtf.format(now)+" - "+message);
        }else{
            serverInfoTxt.setText(currentText+System.lineSeparator()+dtf.format(now)+" - "+message);
        }      
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        changeServerStateBtn = new javax.swing.JButton();
        settingsBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        serverInfoTxt = new javax.swing.JTextArea();
        instructionsBtn = new javax.swing.JButton();
        serverStatusLbl = new javax.swing.JLabel();
        serverStatusColourLbl = new javax.swing.JLabel();
        appointLeaderBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server");

        changeServerStateBtn.setText("Turn Server On");
        changeServerStateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeServerStateBtnActionPerformed(evt);
            }
        });

        settingsBtn.setText("Change Port Number");
        settingsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsBtnActionPerformed(evt);
            }
        });

        serverInfoTxt.setColumns(20);
        serverInfoTxt.setRows(5);
        jScrollPane1.setViewportView(serverInfoTxt);

        instructionsBtn.setText("Instructions");
        instructionsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instructionsBtnActionPerformed(evt);
            }
        });

        serverStatusLbl.setText("Server IS NOT Running");

        serverStatusColourLbl.setForeground(new java.awt.Color(255, 0, 0));
        serverStatusColourLbl.setOpaque(true);

        appointLeaderBtn.setText("Set Club Leader");
        appointLeaderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointLeaderBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(settingsBtn)
                                .addGap(259, 259, 259)
                                .addComponent(instructionsBtn)
                                .addGap(235, 235, 235)
                                .addComponent(appointLeaderBtn))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(145, 145, 145)
                                .addComponent(changeServerStateBtn)
                                .addGap(370, 370, 370)
                                .addComponent(serverStatusLbl)
                                .addGap(76, 76, 76)
                                .addComponent(serverStatusColourLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 111, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(changeServerStateBtn)
                            .addComponent(serverStatusLbl)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(serverStatusColourLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settingsBtn)
                    .addComponent(instructionsBtn)
                    .addComponent(appointLeaderBtn))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * This method asks the user to confirm whether they would like to change server settings. If they do, they will be taken to a form that allows them to edit the server settings
     * @param evt The appropriate button is clicked
     */
    private void settingsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsBtnActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Changing the server settings will mean that the server will go offline until it is restarted. Are you sure you would you like to proceed?","Continue?",JOptionPane.YES_NO_CANCEL_OPTION);
        //asks the user to confirm that they wish to proceed
        if(confirm==JOptionPane.YES_OPTION){
            if(isServerRunning){
                changeServerStateBtn.doClick();
            }
            ChangeServerDetails change = new ChangeServerDetails();
            change.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_settingsBtnActionPerformed

    private void changeServerStateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeServerStateBtnActionPerformed
        isServerRunning=!isServerRunning;//changes the sever state
        if(isServerRunning){
            try{
                //creates a new server and starts it
                errorMessagesArray=new String[0];
                serv = new Server(errorMessagesArray);
                serverThread = new Thread(serv);
                serverThread.start();//starts the server
                timer = new Timer(1000, new ActionListener() {//checks periodically to see if any erros have occured, and kills the server if this is the case
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        if(serv.haveAnyErrorsOccured()){
                            //shuts the server down in any errros have occurred and displays these messages on the text field
                            serverThread.interrupt();
                            errorMessagesArray=serv.getErrorMessages();
                            for(int i=0;i<errorMessagesArray.length;i++){
                                addMessageToTextArea(errorMessagesArray[i]);
                            }
                            try {
                                serv.closeServerSocket();
                            } catch (IOException ex) {
                                addMessageToTextArea(ex.getMessage());
                            }
                            isServerRunning=false;
                            serv =null;
                            serverThread=null;
                            timer.stop();
                            updateCompontentsBasedOnServerStatus();
                        }
                    }
                });
                timer.start();//starts the timer
            }catch(Exception e){
                isServerRunning=false;
                addMessageToTextArea(e.getMessage());
                updateCompontentsBasedOnServerStatus();
            }
        }else{
            if(timer!=null){//stops the timer
                timer.stop();
            }
            try {
                serv.closeServerSocket();//closes the server safely
            } catch (IOException ex) {
                addMessageToTextArea(ex.getMessage());
            }
            serv=null;serverThread=null;timer=null;
        }
        updateCompontentsBasedOnServerStatus();//updates the form
    }//GEN-LAST:event_changeServerStateBtnActionPerformed

    private void appointLeaderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointLeaderBtnActionPerformed
        // sets a new club leader if appropriate. This can also be used to choose a leader when no leaders exist
        int confirm = JOptionPane.showConfirmDialog(this, "Are you would like to appoint a leader? If a leader exists, they will be replaced.", "Proceed?", JOptionPane.YES_NO_CANCEL_OPTION);
        if(confirm==JOptionPane.YES_OPTION){
            //appoints somebody else as the chess club leader
            String newLeader = JOptionPane.showInputDialog(this,"Please input the username of the new leader:");
            if(newLeader==null){
                return;
            }
            try{
                serv.queue.setUserAsLeaderAndMember(newLeader);
                JOptionPane.showMessageDialog(this,"The leader was appointed.","Leader Appointed.",JOptionPane.OK_OPTION);
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,"The username inputted was not valid and hence leadership has not changed.","Username invalid.",JOptionPane.OK_OPTION);    
            }
        }
    }//GEN-LAST:event_appointLeaderBtnActionPerformed

    private void instructionsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instructionsBtnActionPerformed
        // displays the instructions
        JOptionPane.showMessageDialog(this,
                "This application is the server. For the West Cross Chess software to function, this server needs to be on at all times."
                +System.lineSeparator()+"Simply press the button titled turn server on to turn the server on. If the server is running"

+System.lineSeparator()+", this form will say 'Server IS Running'. The server runs on what is known as a port. It is set at 80, which should be fine"
                +System.lineSeparator()+" however you may wish to change this using the 'Change Port Number'. This is not advised unless port 80 is used for some other process on your computer."
                +System.lineSeparator()+"The 'Set Club Leader' button is used to choose a user to be the club leader. This is sometimes used if an old leader leaves, or when setting the system up."
                +System.lineSeparator()+"In order for users to make use of this, you must find out the public IPV4 address of your router (or host network). This may change over time depending on what"
                +System.lineSeparator()+"internet provider you use."
                +System.lineSeparator()+"If any tech support is needed, please don't hesitate to contact the maker of this system (Philip Mortimer). Contact Philip at philipmortimer99@aol.com"
                ,"Instructions",JOptionPane.OK_OPTION);
    }//GEN-LAST:event_instructionsBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton appointLeaderBtn;
    private javax.swing.JButton changeServerStateBtn;
    private javax.swing.JButton instructionsBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea serverInfoTxt;
    private javax.swing.JLabel serverStatusColourLbl;
    private javax.swing.JLabel serverStatusLbl;
    private javax.swing.JButton settingsBtn;
    // End of variables declaration//GEN-END:variables
}
